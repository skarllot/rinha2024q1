// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: ObterExtratoProjectionLiveAggregation335872789
    public class ObterExtratoProjectionLiveAggregation335872789 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel>
    {
        private readonly Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ObterExtratoProjection _obterExtratoProjection;

        public ObterExtratoProjectionLiveAggregation335872789(Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ObterExtratoProjection obterExtratoProjection)
        {
            _obterExtratoProjection = obterExtratoProjection;
        }


        public System.Func<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Creditar.ClienteCreditado>, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> ProjectEvent1 {get; set;}

        public System.Func<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Debitar.ClienteDebitado>, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> ProjectEvent2 {get; set;}

        public System.Func<Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Cadastrar.ClienteCadastrado>, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> Create1 {get; set;}


        public override Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel snapshot)
        {
            if (!events.Any()) return null;
            Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel extratoModel = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Cadastrar.ClienteCadastrado> event_ClienteCadastrado8:
                    return Create1.Invoke(event_ClienteCadastrado8);
                    break;
            }

            return null;
        }


        public Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }


        public Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel Apply(Marten.Events.IEvent @event, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Creditar.ClienteCreditado> event_ClienteCreditado9:
                    aggregate = ProjectEvent1.Invoke(aggregate, event_ClienteCreditado9);
                    break;
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Debitar.ClienteDebitado> event_ClienteDebitado10:
                    aggregate = ProjectEvent2.Invoke(aggregate, event_ClienteDebitado10);
                    break;
            }

            return aggregate;
        }

    }

    // END: ObterExtratoProjectionLiveAggregation335872789
    
    
    // START: ObterExtratoProjectionInlineHandler335872789
    public class ObterExtratoProjectionInlineHandler335872789 : Marten.Events.Aggregation.AggregationRuntime<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, System.Guid> _storage;
        private readonly Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ObterExtratoProjection _obterExtratoProjection;

        public ObterExtratoProjectionInlineHandler335872789(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, System.Guid> storage, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ObterExtratoProjection obterExtratoProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _obterExtratoProjection = obterExtratoProjection;
        }


        public System.Func<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Creditar.ClienteCreditado>, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> ProjectEvent1 {get; set;}

        public System.Func<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Debitar.ClienteDebitado>, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> ProjectEvent2 {get; set;}

        public System.Func<Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Cadastrar.ClienteCadastrado>, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> Create1 {get; set;}


        public override async System.Threading.Tasks.ValueTask<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel, System.Guid> slice, Marten.Events.IEvent evt, Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Cadastrar.ClienteCadastrado> event_ClienteCadastrado14:
                    aggregate = Create1.Invoke(event_ClienteCadastrado14);
                    return aggregate;
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Creditar.ClienteCreditado> event_ClienteCreditado12:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel should either have a static Create method that returns the event type Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Creditar.ClienteCreditado> or Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Creditar.ClienteCreditado> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = ProjectEvent1.Invoke(aggregate, event_ClienteCreditado12);
                    return aggregate;
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Debitar.ClienteDebitado> event_ClienteDebitado13:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel should either have a static Create method that returns the event type Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Debitar.ClienteDebitado> or Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Debitar.ClienteDebitado> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = ProjectEvent2.Invoke(aggregate, event_ClienteDebitado13);
                    return aggregate;
            }

            return aggregate;
        }


        public Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Rinha.MMXXIV.Q1.Core.Clientes.Cadastrar.ClienteCadastrado> event_ClienteCadastrado11:
                    return Create1.Invoke(event_ClienteCadastrado11);
                    break;
            }

            return null;
        }


        public Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Rinha.MMXXIV.Q1.Infrastructure.Clientes.v1.ObterExtrato.ExtratoModel or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }

    }

    // END: ObterExtratoProjectionInlineHandler335872789
    
    
}

